<program> ::= <statement_list>

<statement_list> ::= <statement>*   // 0 or more statements

<statement> ::= <assignment>
              | <reassignment>
              | <expression_statement>
              | <if_statement>
              | <loop_statement>
              | <block>
              | <function_def>
              | <return_statement>
              | <comment>

// ---------------------
// Variable Assignments
// ---------------------
<assignment> ::= "make" <variable> "get" <expression>
<reassignment> ::= <variable> "get" <expression>
<expression_statement> ::= <expression>

// ---------------------
// Functions
// ---------------------
<function_def> ::= "do" <identifier> "(" <param_list>? ")" "start" <statement_list> "end"
<param_list> ::= <identifier> ("," <identifier>)*

<return_statement> ::= "return" <expression>?

// ---------------------
// Function Calls
// ---------------------
<function_call> ::= <identifier> "(" <arg_list>? ")"
<arg_list> ::= <expression> ("," <expression>)*

// ---------------------
// Conditionals
// ---------------------
<if_statement> ::= "if to say" "(" <expression> ")" <block> <else_clause>?

<else_clause> ::= "if not so" <block>
                | "if to say" "(" <expression> ")" <block> <else_clause>?
                | Îµ

// ---------------------
// Loops
// ---------------------
<loop_statement> ::= "jasi" "(" <expression> ")" <block>

// ---------------------
// Block
// ---------------------
<block> ::= "start" <statement_list> "end"

// ---------------------
// Comments
// ---------------------
<comment> ::= "#" <comment_text>
<comment_text> ::= { any character except newline }

// ---------------------
// Identifiers & Variables
// ---------------------
<variable> ::= <identifier>

<identifier> ::= <id_start> <id_continue>*
<id_start> ::= <letter> | "_"
<id_continue> ::= <letter> | <digit> | "_"

// Reserved keywords must be excluded in implementation
// e.g., do, make, get, if, jasi, start, end, return, true, false, add, minus, times, divide, mod, or, and, not

<letter> ::= "a" | ... | "Z"  // all ASCII letters
<digit> ::= "0" | ... | "9"

// ---------------------
// Expressions (precedence climbing)
// ---------------------

<expression> ::= <logic_or>

<logic_or> ::= <logic_and> ("or" <logic_and>)*
<logic_and> ::= <equality> ("and" <equality>)*
<equality> ::= <comparison> (("na" | "pass" | "small pass") <comparison>)*
<comparison> ::= <arith_expr>

<arith_expr> ::= <term> (("add" | "minus") <term>)*
<term> ::= <factor> (("times" | "divide" | "mod") <factor>)*
<factor> ::= "not" <factor>
           | "minus" <factor>
           | "(" <expression> ")"
           | <function_call>
           | <variable>
           | <number>
           | <string>
           | <boolean>

// ---------------------
// Literals
// ---------------------
<boolean> ::= "true" | "false"

<string> ::= "\"" <string_char>* "\""
<string_char> ::= any character except "\"" or "\\" | "\\" <escape_sequence>
<escape_sequence> ::= "\"" | "\\" | "n" | "t"

<number> ::= <digit>+ ("." <digit>+)?